#define BLE_UUID "d7f13c33-0fd9-4923-976b-8eea5c335467"

#include <Adafruit_LSM9DS1.h>
#include <ArduinoBLE.h>

/*
 * This is a sketch that demonstrates Arduino BLE33 IMU sensor readings via Bluetooth Low Energy(BLE) 
 * The IMU chip is known as LSM9DS1
 */

// i2c
Adafruit_LSM9DS1 lsm = Adafruit_LSM9DS1();

BLEService sensorService(BLE_UUID); // create service

// create button characteristic and allow remote device to get notifications
BLECharacteristic sensorReadings(BLE_UUID,  BLERead | BLENotify, 512);

int test = 15;

void setupIMUSensor()
{
  // 1.) Set the accelerometer range
  lsm.setupAccel(lsm.LSM9DS1_ACCELRANGE_2G);
  //lsm.setupAccel(lsm.LSM9DS1_ACCELRANGE_4G);
  //lsm.setupAccel(lsm.LSM9DS1_ACCELRANGE_8G);
  //lsm.setupAccel(lsm.LSM9DS1_ACCELRANGE_16G);
  
  // 2.) Set the magnetometer sensitivity
  lsm.setupMag(lsm.LSM9DS1_MAGGAIN_4GAUSS);
  //lsm.setupMag(lsm.LSM9DS1_MAGGAIN_8GAUSS);
  //lsm.setupMag(lsm.LSM9DS1_MAGGAIN_12GAUSS);
  //lsm.setupMag(lsm.LSM9DS1_MAGGAIN_16GAUSS);

  // 3.) Setup the gyroscope
  lsm.setupGyro(lsm.LSM9DS1_GYROSCALE_245DPS);
  //lsm.setupGyro(lsm.LSM9DS1_GYROSCALE_500DPS);
  //lsm.setupGyro(lsm.LSM9DS1_GYROSCALE_2000DPS);
}

void setup() {
  Serial.begin(9600);

  // Try to initialise and warn if we couldn't detect the chip
  if (!lsm.begin())
  {
    Serial.println("Oops ... unable to initialize the LSM9DS1. Check your wiring!");
    while (1);
  }
  Serial.println("Found LSM9DS1 9DOF IMU");

  // helper to just set the default scaling we want, see above!
  setupIMUSensor();

  if (!BLE.begin()){
    Serial.println("Starting BLE failed!");
    while(1);
  }
  
  BLE.setLocalName("IMUsensor");  // set the name that is will appear as
  BLE.setAdvertisedService(sensorService);   // the uuid for the service this peripheral advertises
  BLE.addService(sensorService);

  
}

void loop() {
  // put your main code here, to run repeatedly:
  lsm.read();  /* ask it to read in the data */ 

  /* Get a new sensor event */ 
  sensors_event_t a, m, g, temp;

  lsm.getEvent(&a, &m, &g, &temp); 

  Serial.print("Accel X: "); Serial.print(a.acceleration.x); Serial.print(" m/s^2");
  Serial.print("\tY: "); Serial.print(a.acceleration.y);     Serial.print(" m/s^2 ");
  Serial.print("\tZ: "); Serial.print(a.acceleration.z);     Serial.println(" m/s^2 ");

  Serial.print("Mag X: "); Serial.print(m.magnetic.x);   Serial.print(" uT");
  Serial.print("\tY: "); Serial.print(m.magnetic.y);     Serial.print(" uT");
  Serial.print("\tZ: "); Serial.print(m.magnetic.z);     Serial.println(" uT");

  Serial.print("Gyro X: "); Serial.print(g.gyro.x);   Serial.print(" rad/s");
  Serial.print("\tY: "); Serial.print(g.gyro.y);      Serial.print(" rad/s");
  Serial.print("\tZ: "); Serial.print(g.gyro.z);      Serial.println(" rad/s");

  Serial.println();
  delay(200);

}
